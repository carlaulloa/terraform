# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

#trigger:
#- master

pool:
  vmImage: ubuntu-latest

steps:
- script: echo Hello, world!
  displayName: 'Run a one-line script'

- script: |
    echo Add other tasks to build, test, and deploy your project.
    echo See https://aka.ms/yaml
  displayName: 'Run a multi-line script'
- task: DownloadSecureFile@1
  name: publickey
  inputs:
    secureFile: "azure_rsa.pub"

- task: TerraformCLI@0
  inputs:
    command: 'init'
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-terraform/kubernetes'
    commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
    backendType: 'azurerm'
    backendServiceArm: 'azure-resource-manual'
    ensureBackend: true
    backendAzureRmResourceGroupName: 'gr01-devops2'
    backendAzureRmResourceGroupLocation: 'eastus'
    backendAzureRmStorageAccountName: 'storagetestccu'
    backendAzureRmContainerName: 'storagecontainer'
    backendAzureRmKey: 'kubernetes-dev.tfstate'
    allowTelemetryCollection: true

- task: TerraformCLI@0
  inputs:
    command: 'apply'
    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-terraform/kubernetes'
    environmentServiceName: 'azure-resource-manual'
    commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
    allowTelemetryCollection: true

#- task: TerraformCLI@0
#  inputs:
#    command: 'destroy'
#    workingDirectory: '$(System.DefaultWorkingDirectory)/azure-terraform/kubernetes'
#    environmentServiceName: 'azure-resource-manual'
#    commandOptions: '-var client_id=$(client_id) -var client_secret=$(client_secret) -var ssh_public_key=$(publickey.secureFilePath)'
#    allowTelemetryCollection: true
    
